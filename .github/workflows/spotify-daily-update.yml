name: Spotify Playlist Daily Update

on:
  schedule:
    - cron: "0 0 * * *"

jobs:
  update-playlists:
    runs-on: ubuntu-latest

    steps:
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.x"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests

      - name: Update Spotify Playlists
        env:
          SPOTIFY_CLIENT_ID: ${{ secrets.SPOTIFY_CLIENT_ID }}
          SPOTIFY_CLIENT_SECRET: ${{ secrets.SPOTIFY_CLIENT_SECRET }}
          SPOTIFY_REFRESH_TOKEN: ${{ secrets.SPOTIFY_REFRESH_TOKEN }}
        run: |
          python <<EOF
          import os
          import requests
          import base64

          token_url = 'https://accounts.spotify.com/api/token'
          playlists_url = 'https://api.spotify.com/v1/playlists'

          playlists_to_update = {
              '1_year': '0z4kiW6MRglJOGiDvfinFj',
              '6_months': '0KnhM3h7S5CYPk1p1JQhX7',
              '4_weeks': '5VPzKaO7xse7luhA3yHVNj'
          }

          playlists_to_sort = [
              '0fttleBNo8RglYCOrJBscG',
              '4hEsiGE5GnGl1gaF4ly29r',
              '2y07GHlHy5Qlnz9flg8AZX'
          ]

          client_id = os.getenv('SPOTIFY_CLIENT_ID')
          client_secret = os.getenv('SPOTIFY_CLIENT_SECRET')
          refresh_token = os.getenv('SPOTIFY_REFRESH_TOKEN')

          def get_access_token():
              auth_str = f'{client_id}:{client_secret}'
              b64_auth_str = base64.b64encode(auth_str.encode()).decode()

              headers = {
                  'Authorization': f'Basic {b64_auth_str}',
                  'Content-Type': 'application/x-www-form-urlencoded'
              }
              data = {
                  'grant_type': 'refresh_token',
                  'refresh_token': refresh_token
              }

              response = requests.post(token_url, headers=headers, data=data)
              response_data = response.json()
              return response_data.get('access_token')

          def get_top_tracks(time_range):
              access_token = get_access_token()
              headers = {
                  'Authorization': f'Bearer {access_token}'
              }
              params = {
                  'time_range': time_range,
                  'limit': 50
              }
              response = requests.get('https://api.spotify.com/v1/me/top/tracks', headers=headers, params=params)
              return [track['uri'] for track in response.json().get('items', [])]

          def update_playlist(playlist_id, track_uris):
              access_token = get_access_token()
              headers = {
                  'Authorization': f'Bearer {access_token}',
                  'Content-Type': 'application/json'
              }
              url = f'{playlists_url}/{playlist_id}/tracks'
              
              requests.put(url, headers=headers, json={'uris': []})
              
              requests.post(url, headers=headers, json={'uris': track_uris})

          def get_playlist_tracks(playlist_id):
              access_token = get_access_token()
              headers = {
                  'Authorization': f'Bearer {access_token}'
              }
              url = f'{playlists_url}/{playlist_id}/tracks'
              response = requests.get(url, headers=headers)
              items = response.json().get('items', [])
              return [
                  {
                      'uri': item['track']['uri'],
                      'name': item['track']['name']
                  } for item in items
              ]

          def sort_playlist(playlist_id):
              tracks = get_playlist_tracks(playlist_id)
              sorted_tracks = sorted(tracks, key=lambda t: t['name'].lower())  
              track_uris = [track['uri'] for track in sorted_tracks]
              update_playlist(playlist_id, track_uris)

          update_playlist(playlists_to_update['1_year'], get_top_tracks('long_term'))
          update_playlist(playlists_to_update['6_months'], get_top_tracks('medium_term'))
          update_playlist(playlists_to_update['4_weeks'], get_top_tracks('short_term'))

          for playlist_id in playlists_to_sort:
              sort_playlist(playlist_id)
          EOF
